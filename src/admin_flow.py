from __future__ import annotations

import os
import logging
from typing import Optional, List

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from .appwrite_client import get_repo

try:
    import gspread
    from google.oauth2.service_account import Credentials
except Exception:
    gspread = None
    Credentials = None

router = Router()

# -----------------------------------------------------------------------------


class AdminState(StatesGroup):
    waiting_comment = State()      # –¥–ª—è approve/reject
    waiting_group = State()
    waiting_note = State()         # –¥–ª—è ¬´–ø—Ä–æ—Å—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è¬ª


def _status_title(s: str) -> str:
    return {
        "pending": "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏",
        "approved": "‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ",
        "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ",
    }.get(s, s)


def _safe_count(status: str) -> str:
    try:
        repo = get_repo()
        res = repo.list_submissions(status=status, page=1, page_size=1)
        return str(res.get("total", "?"))
    except Exception:
        return "?"


def _get_admin_chat_ids() -> List[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ tg_user_id –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤.
    """
    repo = get_repo()
    try:
        docs = repo.db.list_documents(
            database_id=repo.db_id,
            collection_id=repo.admins_col,
        ).get("documents", [])
        ids: List[int] = []
        for d in docs:
            try:
                ids.append(int(str(d.get("tg_user_id", "")).strip()))
            except Exception:
                pass
        return ids
    except Exception:
        return []


# -------------------------- Google Sheets helpers ----------------------------
def _get_sheet():
    if gspread is None or Credentials is None:
        raise RuntimeError("gspread/google-auth –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
    sheet_id = os.getenv("GOOGLE_SHEET_ID")
    tab_name = os.getenv("GOOGLE_SHEET_TAB", "–õ–∏—Å—Ç1")
    sa_path = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON_PATH", "./service_account.json")
    if not sheet_id:
        raise RuntimeError("GOOGLE_SHEET_ID –Ω–µ –∑–∞–¥–∞–Ω")
    if not os.path.exists(sa_path):
        raise RuntimeError(f"service_account.json –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {sa_path}")

    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive",
    ]
    creds = Credentials.from_service_account_file(sa_path, scopes=scopes)
    client = gspread.authorize(creds)
    sh = client.open_by_key(sheet_id)
    try:
        ws = sh.worksheet(tab_name)
    except gspread.exceptions.WorksheetNotFound:
        ws = sh.add_worksheet(title=tab_name, rows="2000", cols="40")
    return ws


def _header_indexes(ws) -> dict[str, int]:
    headers = ws.row_values(1)
    return {(h or "").strip().lower(): i + 1 for i, h in enumerate(headers)}


def update_sheet_status_and_comment(appwrite_id: str, new_status: Optional[str], comment: Optional[str]):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/Updated At –≤ Sheets.
    –ï—Å–ª–∏ new_status is None ‚Äî –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ Updated At.
    """
    try:
        ws = _get_sheet()
        matches = ws.findall(appwrite_id)
        if not matches:
            logging.warning("[Sheets] –ù–µ –Ω–∞—à—ë–ª —Å—Ç—Ä–æ–∫—É —Å ID=%s ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è—é.", appwrite_id)
            return

        row = matches[0].row
        idx = _header_indexes(ws)

        status_col = idx.get("—Å—Ç–∞—Ç—É—Å")
        comment_col = idx.get("–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        updated_at_col = idx.get("updated at")

        batch = []
        if new_status is not None and status_col:
            batch.append({"range": gspread.utils.rowcol_to_a1(row, status_col), "values": [[new_status]]})
        if comment is not None and comment_col:
            batch.append({"range": gspread.utils.rowcol_to_a1(row, comment_col), "values": [[comment]]})
        if updated_at_col:
            from datetime import datetime, timezone
            batch.append({
                "range": gspread.utils.rowcol_to_a1(row, updated_at_col),
                "values": [[datetime.now(timezone.utc).isoformat()]],
            })

        if batch:
            ws.batch_update(batch, value_input_option="RAW")
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Google Sheets: %s", e)


# -----------------------------------------------------------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
# -----------------------------------------------------------------------------
def admin_actions_kb(doc_id: str, back_status: str):
    """
    –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –∑–∞—è–≤–∫–æ–π:
      –ü—Ä–∏–Ω—è—Ç—å / –û—Ç–∫–ª–æ–Ω–∏—Ç—å / –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π / –ù–∞–∑–∞–¥
    """
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"admin:decide:{doc_id}:approved:{back_status}:1")
    kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin:decide:{doc_id}:rejected:{back_status}:1")
    kb.button(text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"admin:note:{doc_id}:{back_status}")
    kb.adjust(2, 1)
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"admin:back:{back_status}")
    kb.adjust(1)
    return kb.as_markup()


# -----------------------------------------------------------------------------
# UI: –º–µ–Ω—é/—Å–ø–∏—Å–∫–∏
# -----------------------------------------------------------------------------
async def _send_status_menu(msg_or_cb):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    c_pending = _safe_count("pending")
    c_approved = _safe_count("approved")
    c_rejected = _safe_count("rejected")

    kb = InlineKeyboardBuilder()
    kb.button(text=f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏ ({c_pending})", callback_data="admin:show:pending")
    kb.button(text=f"‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ ({c_approved})", callback_data="admin:show:approved")
    kb.button(text=f"‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ ({c_rejected})", callback_data="admin:show:rejected")
    kb.adjust(1)

    text = "<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫:"
    if isinstance(msg_or_cb, Message):
        await msg_or_cb.answer(text, parse_mode="HTML", reply_markup=kb.as_markup())
    else:
        await msg_or_cb.message.edit_text(text, parse_mode="HTML", reply_markup=kb.as_markup())


async def _send_list_by_status(msg_or_cb, status: str, group: Optional[str] = None):
    repo = get_repo()
    res = repo.list_submissions(status=status, page=1, page_size=30, group=group)
    items = res.get("documents", [])

    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()

    for doc in items:
        title = f"{doc.get('full_name','?')} | {doc.get('group','?')}"
        kb.button(text=title[:60], callback_data=f"admin:view:{doc['$id']}:{status}")

    kb.adjust(1)
    kb.button(text="üîé –ü–æ–∏—Å–∫ –ø–æ –≥—Ä—É–ø–ø–µ", callback_data=f"admin:search:{status}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")
    kb.adjust(1)

    header = f"<b>{_status_title(status)}</b> ‚Äî –Ω–∞–π–¥–µ–Ω–æ {res.get('total','?')}"
    if isinstance(msg_or_cb, Message):
        await msg_or_cb.answer(header, parse_mode="HTML", reply_markup=kb.as_markup())
    else:
        await msg_or_cb.message.edit_text(header, parse_mode="HTML", reply_markup=kb.as_markup())


# -----------------------------------------------------------------------------
# Handlers
# -----------------------------------------------------------------------------
@router.message(Command("admin"))
async def admin_entry(msg: Message):
    repo = get_repo()
    if not repo.is_admin(str(msg.from_user.id)):
        await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await _send_status_menu(msg)


@router.callback_query(F.data.startswith("admin:show:"))
async def admin_show(cb: CallbackQuery):
    _, _, status = cb.data.split(":")
    await _send_list_by_status(cb, status=status)
    await cb.answer()


@router.callback_query(F.data == "admin:menu")
async def admin_back(cb: CallbackQuery):
    await _send_status_menu(cb)
    await cb.answer()


@router.callback_query(F.data.startswith("admin:search:"))
async def admin_search(cb: CallbackQuery, state: FSMContext):
    _, _, status = cb.data.split(":")
    await state.update_data(status=status)
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –í–ò–°-41):")
    await state.set_state(AdminState.waiting_group)
    await cb.answer()


@router.message(AdminState.waiting_group)
async def admin_search_group(msg: Message, state: FSMContext):
    data = await state.get_data()
    status = data.get("status", "pending")
    group = msg.text.strip()
    await state.clear()
    await _send_list_by_status(msg, status=status, group=group)


@router.callback_query(F.data.startswith("admin:view:"))
async def admin_view(cb: CallbackQuery):
    _, _, doc_id, status = cb.data.split(":")
    repo = get_repo()
    try:
        doc = repo.db.get_document(repo.db_id, repo.sub_col, doc_id)
    except Exception:
        await cb.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", show_alert=True)
        return

    text = (
        f"<b>–ó–∞—è–≤–∫–∞</b>\n\n"
        f"üë§ –§–ò–û: {doc.get('full_name','‚Äî')}\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {doc.get('group','‚Äî')}\n"
        f"üìß Email: {doc.get('email','‚Äî')}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {doc.get('birthDate','‚Äî')}\n\n"
        f"üìö –õ—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏: {doc.get('books','‚Äî')}\n"
        f"üé¨ –õ—é–±–∏–º—ã–π —Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª: {doc.get('likedRecentMovie','‚Äî')}\n"
        f"‚ÑπÔ∏è –ö–æ—Ä–æ—Ç–∫–æ –æ –≤–∞—Å: {doc.get('aboutYou','‚Äî')}\n"
        f"üéì –ü–ª–∞–Ω—ã –ø–æ—Å–ª–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞: {doc.get('afterUniversity','‚Äî')}\n"
        f"üéñ –ö—Ä–∞—Å–Ω—ã–π –¥–∏–ø–ª–æ–º: {doc.get('redDiploma','‚Äî')}\n"
        f"üìë –ò–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—É—á–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {doc.get('scienceInterest','‚Äî')}\n\n"
        f"üìù –¢–µ–º–∞ —Ä–∞–±–æ—Ç—ã: {doc.get('thesisTopic','‚Äî')}\n"
        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: {doc.get('thesisDescription','‚Äî')}\n"
        f"üìä –ê–Ω–∞–ª–æ–≥–∏ –ø—Ä–æ–µ–∫—Ç–∞: {doc.get('analogsProsCons','‚Äî')}\n"
        f"‚öôÔ∏è –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: {doc.get('plannedFeatures','‚Äî')}\n"
        f"üñ•Ô∏è –°—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: {doc.get('techStack','‚Äî')}\n\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {doc.get('status','‚Äî')}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {doc.get('admin_comment','‚Äî')}"
    )

    await cb.message.edit_text(text, parse_mode="HTML", reply_markup=admin_actions_kb(doc_id, status))
    await cb.answer()


# --- –†–µ—à–µ–Ω–∏–µ (approve/reject) ---
@router.callback_query(F.data.startswith("admin:decide:"))
async def admin_decide(cb: CallbackQuery, state: FSMContext):
    _, _, doc_id, decision, back_status, _ = cb.data.split(":")
    await state.update_data(doc_id=doc_id, decision=decision, back_status=back_status)
    await cb.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–µ—à–µ–Ω–∏—é (–∏–ª–∏ '-' –µ—Å–ª–∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è).")
    await state.set_state(AdminState.waiting_comment)
    await cb.answer()


@router.message(AdminState.waiting_comment)
async def admin_comment(msg: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    repo = get_repo()
    doc_id = data["doc_id"]
    decision = data["decision"]
    comment = "" if msg.text.strip() == "-" else msg.text.strip()

    try:
        doc = repo.db.get_document(repo.db_id, repo.sub_col, doc_id)
    except Exception:
        await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.")
        await state.clear()
        return

    repo.update_submission_status(doc_id, decision, comment)
    update_sheet_status_and_comment(doc_id, decision, comment or None)

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
    student_tg = doc.get("tg_user_id")
    if student_tg:
        try:
            await bot.send_message(
                int(student_tg),
                f"üìå –†–µ—à–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ: <b>{'–ø—Ä–∏–Ω—è—Ç–∞' if decision=='approved' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}</b>\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '‚Äî'}",
                parse_mode="HTML",
            )
        except Exception:
            pass

    await msg.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")
    await state.clear()
    await _send_status_menu(msg)


# --- –ü—Ä–æ—Å—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–±–µ–∑ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞) ---
@router.callback_query(F.data.startswith("admin:note:"))
async def admin_note_ask(cb: CallbackQuery, state: FSMContext):
    _, _, doc_id, back_status = cb.data.split(":")
    await state.update_data(doc_id=doc_id, back_status=back_status)
    await cb.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞).")
    await state.set_state(AdminState.waiting_note)
    await cb.answer()


@router.message(AdminState.waiting_note)
async def admin_note_save(msg: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    repo = get_repo()
    doc_id = data["doc_id"]
    note = msg.text.strip()

    try:
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        repo.db.update_document(
            database_id=repo.db_id,
            collection_id=repo.sub_col,
            document_id=doc_id,
            data={"admin_comment": note},
        )
        update_sheet_status_and_comment(doc_id, None, note or None)

        # —É–≤–µ–¥–æ–º–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞, —á—Ç–æ –ø—Ä–∏—à—ë–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        try:
            doc = repo.db.get_document(repo.db_id, repo.sub_col, doc_id)
            student_tg = doc.get("tg_user_id")
            if student_tg:
                await bot.send_message(
                    int(student_tg),
                    f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ: {note or '‚Äî'}",
                    parse_mode="HTML",
                )
        except Exception:
            pass

        await msg.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
    except Exception:
        await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üòï")
    finally:
        await state.clear()
        await _send_status_menu(msg)


@router.callback_query(F.data.startswith("admin:back:"))
async def admin_back_to_list(cb: CallbackQuery):
    _, _, status = cb.data.split(":")
    await _send_list_by_status(cb, status=status)
    await cb.answer()
