from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from .appwrite_client import get_repo

import os
from datetime import datetime
import logging

# --- Google Sheets (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
try:
    import gspread
    from google.oauth2.service_account import Credentials
except Exception:
    gspread = None
    Credentials = None

router = Router()

# ====================== –í–û–ü–†–û–°–´ –ê–ù–ö–ï–¢–´ ======================
class StudentForm(StatesGroup):
    # –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    full_name = State()
    group = State()
    email = State()
    birth_date = State()
    books = State()
    liked_recent_movie = State()
    about_you = State()
    after_university = State()
    red_diploma = State()
    science_interest = State()
    thesis_topic = State()
    thesis_description = State()
    analogs_pros_cons = State()
    planned_features = State()
    tech_stack = State()
    confirm = State()

    # —Ç–æ—á–µ—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    editing = State()

    # —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    answering_admin = State()

# –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π –¥–ª—è —à–∞–≥–∞ ¬´–ù–∞–∑–∞–¥¬ª
ORDER = [
    "full_name", "group", "email", "birthDate", "books", "likedRecentMovie",
    "aboutYou", "afterUniversity", "redDiploma", "scienceInterest",
    "thesisTopic", "thesisDescription", "analogsProsCons",
    "plannedFeatures", "techStack"
]

# ====================== –°–ü–†–ê–í–û–ß–ù–ò–ö –ü–û–õ–ï–ô ======================
FIELDS = [
    ("full_name",         "–§–ò–û",                     "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é"),
    ("group",             "–ì—Ä—É–ø–ø–∞",                  "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –í–ò–°-41)"),
    ("email",             "Email",                   "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á–∏–π email"),
    ("birthDate",         "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",           "–ù–∞–ø—Ä–∏–º–µ—Ä, 26.02.2003"),
    ("books",             "–ö–Ω–∏–≥–∏",                   "–ö–∞–∫–∏–µ –∫–Ω–∏–≥–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç? –ö–∞–∫–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è?"),
    ("likedRecentMovie",  "–§–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª",            "–ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ?"),
    ("aboutYou",          "–û —Å—Ç—É–¥–µ–Ω—Ç–µ",              "–ß—Ç–æ –µ—â—ë —Å–ª–µ–¥—É–µ—Ç –æ –≤–∞—Å –∑–Ω–∞—Ç—å?"),
    ("afterUniversity",   "–ü–æ—Å–ª–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞",      "–ö–µ–º –≤–∏–¥–∏—Ç–µ —Å–µ–±—è –ø–æ—Å–ª–µ –≤—ã–ø—É—Å–∫–∞?"),
    ("redDiploma",        "–ö—Ä–∞—Å–Ω—ã–π –¥–∏–ø–ª–æ–º",          "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ"),
    ("scienceInterest",   "–ù–∞—É—á–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å",    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ"),
    ("thesisTopic",       "–¢–µ–º–∞ –¥–∏–ø–ª–æ–º–∞",            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"),
    ("thesisDescription", "–û–ø–∏—Å–∞–Ω–∏–µ",                "–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç"),
    ("analogsProsCons",   "–ê–Ω–∞–ª–æ–≥–∏ (–ø–ª—é—Å—ã/–º–∏–Ω—É—Å—ã)",  "–ö–∞–∫–∏–µ –µ—Å—Ç—å –∞–Ω–∞–ª–æ–≥–∏, –∏—Ö –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã"),
    ("plannedFeatures",   "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª",  "–ü–µ—Ä–µ—á–µ–Ω—å —Ñ—É–Ω–∫—Ü–∏–π (–∏ —Ä–æ–ª–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å)"),
    ("techStack",         "–°—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",         "–ù–∞ —á–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–∏—Å–∞—Ç—å"),
]
FIELD_LABEL = {k: label for k, label, _ in FIELDS}
FIELD_HINT  = {k: hint  for k, _, hint in FIELDS}

# ====================== –õ–û–ö–ê–õ–¨–ù–´–ï –•–ï–õ–ü–ï–†–´ –î–õ–Ø –ê–î–ú–ò–ù–û–í (–±–µ–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ admin_flow) ======================
def _get_admin_chat_ids() -> list[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ tg_user_id –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–æ–≤ Appwrite.
    –ë–µ–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ admin_flow ‚Äî —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤.
    """
    repo = get_repo()
    try:
        docs = repo.db.list_documents(
            database_id=repo.db_id,
            collection_id=repo.admins_col,
        ).get("documents", [])
        ids: list[int] = []
        for d in docs:
            try:
                ids.append(int(str(d.get("tg_user_id", "")).strip()))
            except Exception:
                pass
        return ids
    except Exception:
        return []

async def notify_admins(bot, text: str):
    try:
        admin_ids = _get_admin_chat_ids()
        for aid in admin_ids:
            try:
                await bot.send_message(aid, text, parse_mode="HTML")
            except Exception:
                pass
    except Exception:
        pass

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def student_menu_with_answer_kb(allow_answer: bool, has_question: bool):
    kb = InlineKeyboardBuilder()
    # –∫–Ω–æ–ø–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å
    if has_question:
        kb.button(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é", callback_data="student:menu:answer")
        kb.adjust(1)
    # –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–¥–º–∏–Ω –≤–∫–ª—é—á–∏–ª allow_student_reply
    if allow_answer:
        kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="student:answer:yes")
        kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="student:answer:no")
        kb.adjust(2)
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data="student:menu:back")
    kb.adjust(1)
    return kb.as_markup()


def student_actions_kb(doc: dict | None):
    """
    –ú–µ–Ω—é ¬´–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è¬ª.
    ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª —Å–∫—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —É–∂–µ –¥–∞–ª –±—É–ª–µ–≤ –æ—Ç–≤–µ—Ç (student_answer != None).
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÑ –ú–æ—è –∑–∞—è–≤–∫–∞", callback_data="student:menu:view")

    can_edit = True
    if doc and doc.get("student_answer") is not None:
        can_edit = False

    if can_edit:
        kb.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="student:menu:edit")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="student:menu:cancel")

    if can_edit:
        kb.adjust(2, 1)
    else:
        kb.adjust(1, 1)

    return kb.as_markup()

def start_reply_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="/start")]],
        resize_keyboard=True,
        one_time_keyboard=False,
    )

def ru_status(s: str) -> str:
    return {
        "pending":  "–í –æ–∂–∏–¥–∞–Ω–∏–∏",
        "approved": "–ü—Ä–∏–Ω—è—Ç–∞",
        "rejected": "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
    }.get((s or "").lower(), s or "‚Äî")

def back_kb(prev_key: str | None):
    kb = InlineKeyboardBuilder()
    if prev_key:
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"student:back:{prev_key}")
        kb.adjust(1)
        return kb.as_markup()
    return None

def red_diploma_kb(prev_key: str | None):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –î–∞",  callback_data="student:redDiploma:yes")
    kb.button(text="‚ùå –ù–µ—Ç", callback_data="student:redDiploma:no")
    kb.button(text="ü§î –ù–µ —Ä–µ—à–∏–ª", callback_data="student:redDiploma:undecided")
    kb.adjust(3)
    if prev_key:
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"student:back:{prev_key}")
        kb.adjust(3, 1)
    return kb.as_markup()

def science_interest_kb(prev_key: str | None):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –î–∞",  callback_data="student:scienceInterest:yes")
    kb.button(text="‚ùå –ù–µ—Ç", callback_data="student:scienceInterest:no")
    kb.button(text="ü§î –ú–æ–∂–µ—Ç –±—ã—Ç—å", callback_data="student:scienceInterest:maybe")
    kb.adjust(3)
    if prev_key:
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"student:back:{prev_key}")
        kb.adjust(3, 1)
    return kb.as_markup()

def start_continue_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="student:begin")
    return kb.as_markup()

def confirm_menu_kb(editing: bool = False):
    kb = InlineKeyboardBuilder()
    kb.button(text=("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" if editing else "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"),
              callback_data="student:confirm:send")
    kb.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data="student:confirm:editmenu:1")
    kb.adjust(1)
    return kb.as_markup()

def edit_fields_menu_kb(page: int = 1, per_page: int = 6):
    total = len(FIELDS)
    pages = (total + per_page - 1) // per_page
    page = max(1, min(page, pages))
    start = (page - 1) * per_page
    chunk = FIELDS[start : start + per_page]

    kb = InlineKeyboardBuilder()
    for key, label, _ in chunk:
        kb.button(text=f"‚úèÔ∏è {label}", callback_data=f"student:edit:{key}")

    if pages > 1:
        if page > 1:
            kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"student:confirm:editmenu:{page-1}")
        kb.button(text=f"{page}/{pages}", callback_data="noop")
        if page < pages:
            kb.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"student:confirm:editmenu:{page+1}")
        kb.adjust(3)

    kb.button(text="‚Ü©Ô∏è –ö –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–Ω–∫–µ—Ç—ã", callback_data="student:confirm:back")
    kb.adjust(1)
    return kb.as_markup()

# ====================== GOOGLE SHEETS ======================
def _get_sheet():
    if gspread is None or Credentials is None:
        raise RuntimeError("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ gspread / google-auth –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

    sheet_id = os.getenv("GOOGLE_SHEET_ID")
    tab_name = os.getenv("GOOGLE_SHEET_TAB", "–õ–∏—Å—Ç1")
    sa_path  = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON_PATH", "./service_account.json")
    if not sheet_id:
        raise RuntimeError("GOOGLE_SHEET_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
    if not os.path.exists(sa_path):
        raise RuntimeError(f"–§–∞–π–ª —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {sa_path}")

    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive",
    ]
    creds  = Credentials.from_service_account_file(sa_path, scopes=scopes)
    client = gspread.authorize(creds)
    sh = client.open_by_key(sheet_id)
    try:
        ws = sh.worksheet(tab_name)
    except gspread.exceptions.WorksheetNotFound:
        ws = sh.add_worksheet(title=tab_name, rows="2000", cols="30")

    if not ws.row_values(1):
        headers = [
            "timestamp","appwrite_id","tg_user_id","full_name","group","email",
            "birthDate","books","likedRecentMovie","aboutYou","afterUniversity",
            "redDiploma","scienceInterest","thesisTopic","thesisDescription",
            "analogsProsCons","plannedFeatures","techStack","status",
        ]
        ws.append_row(headers, value_input_option="RAW")
    return ws

def append_submission_to_sheet(appw_doc: dict):
    try:
        ws = _get_sheet()
        row = [
            datetime.now().isoformat(timespec="seconds"),
            appw_doc.get("$id",""), appw_doc.get("tg_user_id",""),
            appw_doc.get("full_name",""), appw_doc.get("group",""),
            appw_doc.get("email",""), appw_doc.get("birthDate",""),
            appw_doc.get("books",""), appw_doc.get("likedRecentMovie",""),
            appw_doc.get("aboutYou",""), appw_doc.get("afterUniversity",""),
            appw_doc.get("redDiploma",""), appw_doc.get("scienceInterest",""),
            appw_doc.get("thesisTopic",""), appw_doc.get("thesisDescription",""),
            appw_doc.get("analogsProsCons",""), appw_doc.get("plannedFeatures",""),
            appw_doc.get("techStack",""), appw_doc.get("status","pending"),
        ]
        ws.append_row(row, value_input_option="USER_ENTERED")
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–∫—É –≤ Google Sheets: %s", e)

# ====================== –•–ï–õ–ü–ï–†–´ ======================
def _format_submission_for_admin(title: str, payload: dict, appwrite_id: str | None = None, status: str | None = None) -> str:
    status_ru = ru_status(status) if status else "‚Äî"
    lines = [
        f"<b>{title}</b>",
    ]
    lines += [
        f"üë§ –§–ò–û: {payload.get('full_name','‚Äî')}",
        f"üë• –ì—Ä—É–ø–ø–∞: {payload.get('group','‚Äî')}",
        f"üìß Email: {payload.get('email','‚Äî')}",
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {payload.get('birthDate','‚Äî')}",
        "",
        f"üìö –ö–Ω–∏–≥–∏: {payload.get('books','‚Äî')}",
        f"üé¨ –§–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª: {payload.get('likedRecentMovie','‚Äî')}",
        f"‚ÑπÔ∏è –û —Å—Ç—É–¥–µ–Ω—Ç–µ: {payload.get('aboutYou','‚Äî')}",
        f"üéì –ü–æ—Å–ª–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞: {payload.get('afterUniversity','‚Äî')}",
        f"üéñ –ö—Ä–∞—Å–Ω—ã–π –¥–∏–ø–ª–æ–º: {payload.get('redDiploma','‚Äî')}",
        f"üìë –ù–∞—É—á–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {payload.get('scienceInterest','‚Äî')}",
        "",
        f"üìù –¢–µ–º–∞: {payload.get('thesisTopic','‚Äî')}",
        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {payload.get('thesisDescription','‚Äî')}",
        f"üìä –ê–Ω–∞–ª–æ–≥–∏: {payload.get('analogsProsCons','‚Äî')}",
        f"‚öôÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: {payload.get('plannedFeatures','‚Äî')}",
        f"üñ•Ô∏è –°—Ç–µ–∫: {payload.get('techStack','‚Äî')}",
    ]
    if status:
        lines += ["", f"üìå –°—Ç–∞—Ç—É—Å: {status_ru}"]
    return "\n".join(lines)

async def show_greeting_and_outline(msg: Message):
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –≤–∞—à–µ–π –¥–∏–ø–ª–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π üë©‚Äçüè´.\n"
        "–ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –¥–ª—è –º–µ–Ω—è –≤–∞–∂–Ω–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤ IT –∏ –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –í–ö–†, "
        "–∞ –Ω–µ —á–µ—Ç–∫–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ —Ç–µ–º—ã. üéØ\n\n"
        '–° –ø—Ä–∏–º–µ—Ä–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π –¥–∏–ø–ª–æ–º–Ω—ã—Ö —Ä–∞–±–æ—Ç –ø—Ä–æ—à–ª—ã—Ö –ª–µ—Ç –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è '
        '<a href="https://drive.google.com/drive/folders/1OBAJZr9PtM_QERUv_u3mfc8ycHuKSt4U?usp=drive_link">–∑–¥–µ—Å—å</a>. üìö\n\n'
        "–£—Å–ø–µ–π—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –¥–æ –∫–æ–Ω—Ü–∞ —Å–µ–Ω—Ç—è–±—Ä—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ! ‚è∞üòâ\n\n"
        "–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É."
    )
    lst = "\n".join([f"‚Ä¢ {FIELD_LABEL[k]}" for k, _, _ in FIELDS])
    await msg.answer(
        "–í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
        f"{lst}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=start_continue_kb(),
    )

def validate_email(value: str) -> bool:
    return "@" in value and "@" != value[0] and "." in value

def prev_key_of(key: str) -> str | None:
    try:
        i = ORDER.index(key)
        return ORDER[i-1] if i > 0 else None
    except ValueError:
        return None

async def ask_for_field(target_key: str, msg_or_cb, state: FSMContext):
    prev = prev_key_of(target_key)
    mapping = {
        "full_name": StudentForm.full_name,
        "group": StudentForm.group,
        "email": StudentForm.email,
        "birthDate": StudentForm.birth_date,
        "books": StudentForm.books,
        "likedRecentMovie": StudentForm.liked_recent_movie,
        "aboutYou": StudentForm.about_you,
        "afterUniversity": StudentForm.after_university,
        "redDiploma": StudentForm.red_diploma,
        "scienceInterest": StudentForm.science_interest,
        "thesisTopic": StudentForm.thesis_topic,
        "thesisDescription": StudentForm.thesis_description,
        "analogsProsCons": StudentForm.analogs_pro—Ås if False else StudentForm.analogs_pro—Ås if False else StudentForm.analogs_pros_cons,
        "plannedFeatures": StudentForm.planned_features,
        "techStack": StudentForm.tech_stack,
    }
    mapping["analogsProsCons"] = StudentForm.analogs_pros_cons

    await state.set_state(mapping[target_key])

    prompts = {
        "full_name":          "üë§ –í–≤–µ–¥–∏—Ç–µ *–§–ò–û*:",
        "group":              "üë• –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É *–≥—Ä—É–ø–ø—É* (–Ω–∞–ø—Ä–∏–º–µ—Ä, –í–ò–°-41):",
        "email":              "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *email*:",
        "birthDate":          "üìÖ –í–≤–µ–¥–∏—Ç–µ *–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è* (–Ω–∞–ø—Ä–∏–º–µ—Ä, 26.02.2003):",
        "books":              "üìö –ö–∞–∫–∏–µ –∫–Ω–∏–≥–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç —Ç–µ–±—è? –ò –∫–∞–∫–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è –≤—Å—Ç—Ä–µ—Ç–∏–ª–∞—Å—å –Ω–∞ –ø—É—Ç–∏ —Ç–≤–æ—ë–º?",
        "likedRecentMovie":   "üé¨ *–ö–∞–∫–æ–π —Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è?*",
        "aboutYou":           "‚ÑπÔ∏è *–ß—Ç–æ –µ—â—ë —Å–ª–µ–¥—É–µ—Ç –æ –≤–∞—Å –∑–Ω–∞—Ç—å?*",
        "afterUniversity":    "üéì *–ö–µ–º –≤–∏–¥–∏—Ç–µ —Å–µ–±—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞?*",
        "redDiploma":         "üéñ *–ò–¥—ë—Ç–µ –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π –¥–∏–ø–ª–æ–º?*",
        "scienceInterest":    "üìë *–ï—Å—Ç—å –ª–∏ –∂–µ–ª–∞–Ω–∏–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –Ω–∞—É—á–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é?*",
        "thesisTopic":        "üìù *–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–∏–ø–ª–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞)*:",
        "thesisDescription":  "üìÑ *–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:*",
        "analogsProsCons":    "üìä *–ö–∞–∫–∏–µ –µ—Å—Ç—å –∞–Ω–∞–ª–æ–≥–∏? –ò—Ö –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã:*",
        "plannedFeatures":    "‚öôÔ∏è *–ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ (—Å —Ä–æ–ª—è–º–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏):*",
        "techStack":          "üñ•Ô∏è *–ù–∞ —á—ë–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–∏—Å–∞—Ç—å? (—Å—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π)*:",
    }
    text = prompts[target_key]

    if target_key == "redDiploma":
        markup = red_diploma_kb(prev)
    elif target_key == "scienceInterest":
        markup = science_interest_kb(prev)
    else:
        markup = back_kb(prev)

    if isinstance(msg_or_cb, Message):
        await msg_or_cb.answer(text, parse_mode="Markdown", reply_markup=markup)
    else:
        await msg_or_cb.message.edit_text(text, parse_mode="Markdown", reply_markup=markup)

async def show_summary(msg_or_cb, data: dict, editing: bool = False):
    text = (
        "üóÇ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω–∫–µ—Ç—É</b>\n\n"
        f"üë§ –§–ò–û: {data.get('full_name','‚Äî')}\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {data.get('group','‚Äî')}\n"
        f"üìß Email: {data.get('email','‚Äî')}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data.get('birthDate','‚Äî')}\n\n"
        f"üìö –ö–Ω–∏–≥–∏: {data.get('books','‚Äî')}\n"
        f"üé¨ –§–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª: {data.get('likedRecentMovie','‚Äî')}\n"
        f"‚ÑπÔ∏è –û —Å—Ç—É–¥–µ–Ω—Ç–µ: {data.get('aboutYou','‚Äî')}\n"
        f"üéì –ü–æ—Å–ª–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞: {data.get('afterUniversity','‚Äî')}\n"
        f"üéñ –ö—Ä–∞—Å–Ω—ã–π –¥–∏–ø–ª–æ–º: {data.get('redDiploma','‚Äî')}\n"
        f"üìë –ù–∞—É—á–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data.get('scienceInterest','‚Äî')}\n\n"
        f"üìù –¢–µ–º–∞: {data.get('thesisTopic','‚Äî')}\n"
        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('thesisDescription','‚Äî')}\n"
        f"üìä –ê–Ω–∞–ª–æ–≥–∏: {data.get('analogsProsCons','‚Äî')}\n"
        f"‚öôÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: {data.get('plannedFeatures','‚Äî')}\n"
        f"üñ•Ô∏è –°—Ç–µ–∫: {data.get('techStack','‚Äî')}\n"
    )
    markup = confirm_menu_kb(editing=editing)
    if isinstance(msg_or_cb, Message):
        await msg_or_cb.answer(text, reply_markup=markup, parse_mode="HTML")
    else:
        await msg_or_cb.message.edit_text(text, reply_markup=markup, parse_mode="HTML")

# ====================== –°–¶–ï–ù–ê–†–ò–ô ======================
@router.message(CommandStart())
async def start(msg: Message, state: FSMContext):
    await state.clear()
    repo = get_repo()
    existing = repo.get_submission_by_user(str(msg.from_user.id))
    if existing and existing.get("status") in ("pending", "approved"):
        st = existing["status"]
        await msg.answer(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: *{st}*.\n"
            f"–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /start –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç `rejected`.",
            parse_mode="Markdown",
        )
        await msg.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=student_actions_kb(existing))
        return
    await show_greeting_and_outline(msg)

@router.callback_query(F.data == "student:begin")
async def begin_flow(cb: CallbackQuery, state: FSMContext):
    await ask_for_field("full_name", cb, state)
    await cb.answer()

# ----- —à–∞–≥–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è) -----
@router.message(StudentForm.full_name)
async def step_full_name(msg: Message, state: FSMContext):
    await state.update_data(full_name=msg.text.strip())
    await ask_for_field("group", msg, state)

@router.message(StudentForm.group)
async def step_group(msg: Message, state: FSMContext):
    await state.update_data(group=msg.text.strip())
    await ask_for_field("email", msg, state)

@router.message(StudentForm.email)
async def step_email(msg: Message, state: FSMContext):
    value = msg.text.strip()
    if not validate_email(value):
        await msg.answer("–ü–æ—Ö–æ–∂–µ –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=back_kb(prev_key_of("email")))
        return
    await state.update_data(email=value)
    await ask_for_field("birthDate", msg, state)

@router.message(StudentForm.birth_date)
async def step_birth_date(msg: Message, state: FSMContext):
    await state.update_data(birthDate=msg.text.strip())
    await ask_for_field("books", msg, state)

@router.message(StudentForm.books)
async def step_books(msg: Message, state: FSMContext):
    await state.update_data(books=msg.text.strip())
    await ask_for_field("likedRecentMovie", msg, state)

@router.message(StudentForm.liked_recent_movie)
async def step_movie(msg: Message, state: FSMContext):
    await state.update_data(likedRecentMovie=msg.text.strip())
    await ask_for_field("aboutYou", msg, state)

@router.message(StudentForm.about_you)
async def step_about(msg: Message, state: FSMContext):
    await state.update_data(aboutYou=msg.text.strip())
    await ask_for_field("afterUniversity", msg, state)

@router.message(StudentForm.after_university)
async def step_after_uni(msg: Message, state: FSMContext):
    await state.update_data(afterUniversity=msg.text.strip())
    await ask_for_field("redDiploma", msg, state)

# ----- –≤—ã–±–æ—Ä—ã -----
@router.callback_query(F.data.startswith("student:redDiploma"))
async def step_red_diploma(cb: CallbackQuery, state: FSMContext):
    choice = cb.data.split(":")[-1]
    data = await state.get_data()
    if data.get("editing_field") == "redDiploma":
        await state.update_data(redDiploma=choice, editing_field=None)
        await state.set_state(StudentForm.confirm)
        await cb.message.edit_reply_markup()
        await show_summary(cb, await state.get_data(), editing=bool(data.get("_editing_doc_id")))
        await cb.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")
        return
    await state.update_data(redDiploma=choice)
    await ask_for_field("scienceInterest", cb, state)
    await cb.answer()

@router.callback_query(F.data.startswith("student:scienceInterest"))
async def step_science(cb: CallbackQuery, state: FSMContext):
    choice = cb.data.split(":")[-1]
    data = await state.get_data()
    if data.get("editing_field") == "scienceInterest":
        await state.update_data(scienceInterest=choice, editing_field=None)
        await state.set_state(StudentForm.confirm)
        await cb.message.edit_reply_markup()
        await show_summary(cb, await state.get_data(), editing=bool(data.get("_editing_doc_id")))
        await cb.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")
        return
    await state.update_data(scienceInterest=choice)
    await ask_for_field("thesisTopic", cb, state)
    await cb.answer()

# ----- –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ -----
@router.message(StudentForm.thesis_topic)
async def step_topic(msg: Message, state: FSMContext):
    await state.update_data(thesisTopic=msg.text.strip())
    await ask_for_field("thesisDescription", msg, state)

@router.message(StudentForm.thesis_description)
async def step_description(msg: Message, state: FSMContext):
    await state.update_data(thesisDescription=msg.text.strip())
    await ask_for_field("analogsProsCons", msg, state)

@router.message(StudentForm.analogs_pros_cons)
async def step_analogs(msg: Message, state: FSMContext):
    await state.update_data(analogsProsCons=msg.text.strip())
    await ask_for_field("plannedFeatures", msg, state)

@router.message(StudentForm.planned_features)
async def step_features(msg: Message, state: FSMContext):
    await state.update_data(plannedFeatures=msg.text.strip())
    await ask_for_field("techStack", msg, state)

@router.message(StudentForm.tech_stack)
async def step_stack(msg: Message, state: FSMContext):
    await state.update_data(techStack=msg.text.strip())
    data = await state.get_data()
    await state.set_state(StudentForm.confirm)
    await show_summary(msg, data, editing=bool(data.get("_editing_doc_id")))

# ----- —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π ¬´–ù–∞–∑–∞–¥¬ª -----
@router.callback_query(F.data.startswith("student:back:"))
async def on_back(cb: CallbackQuery, state: FSMContext):
    target_key = cb.data.split(":")[-1]
    await ask_for_field(target_key, cb, state)
    await cb.answer()

# ====================== –≠–ö–†–ê–ù –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø / –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï ======================
@router.callback_query(F.data == "student:confirm:back")
async def confirm_back(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.set_state(StudentForm.confirm)
    await show_summary(cb, data, editing=bool(data.get("_editing_doc_id")))
    await cb.answer()

@router.callback_query(F.data.startswith("student:confirm:editmenu:"))
async def confirm_edit_menu(cb: CallbackQuery):
    page = int(cb.data.split(":")[-1])
    await cb.message.edit_reply_markup(reply_markup=edit_fields_menu_kb(page))
    await cb.answer()

@router.callback_query(F.data.startswith("student:edit:"))
async def choose_field_to_edit(cb: CallbackQuery, state: FSMContext):
    key = cb.data.split(":")[-1]
    if key == "redDiploma":
        await state.update_data(editing_field="redDiploma")
        await cb.message.edit_text(
            f"–ò–∑–º–µ–Ω–∏—Ç—å: <b>{FIELD_LABEL[key]}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
            parse_mode="HTML",
            reply_markup=red_diploma_kb(prev_key_of("redDiploma")),
        )
        await cb.answer()
        return
    if key == "scienceInterest":
        await state.update_data(editing_field="scienceInterest")
        await cb.message.edit_text(
            f"–ò–∑–º–µ–Ω–∏—Ç—å: <b>{FIELD_LABEL[key]}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
            parse_mode="HTML",
            reply_markup=science_interest_kb(prev_key_of("scienceInterest")),
        )
        await cb.answer()
        return

    await state.update_data(editing_field=key)
    await state.set_state(StudentForm.editing)
    await cb.message.edit_text(
        f"‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è <b>{FIELD_LABEL[key]}</b>\n\n"
        f"<i>{FIELD_HINT.get(key,'')}</i>",
        parse_mode="HTML",
        reply_markup=back_kb(prev_key_of(key)),
    )
    await cb.answer()

@router.message(StudentForm.editing)
async def save_edited_value(msg: Message, state: FSMContext):
    data = await state.get_data()
    field = data.get("editing_field")
    if not field:
        await state.set_state(StudentForm.confirm)
        await show_summary(msg, await state.get_data(), editing=bool(data.get("_editing_doc_id")))
        return

    val = msg.text.strip()
    if field == "email" and not validate_email(val):
        await msg.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=back_kb(prev_key_of("email")))
        return

    await state.update_data(**{field: val, "editing_field": None})
    await state.set_state(StudentForm.confirm)
    await show_summary(msg, await state.get_data(), editing=bool(data.get("_editing_doc_id")))

# ====================== –û–¢–ü–†–ê–í–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï ======================
@router.callback_query(F.data.startswith("student:confirm"))
async def confirm_handler(cb: CallbackQuery, state: FSMContext):
    parts = cb.data.split(":")
    action = parts[-1] if len(parts) >= 3 else ""

    if action == "reset":
        await state.clear()
        await ask_for_field("full_name", cb, state)
        await cb.answer()
        return

    if action.startswith("editmenu"):
        page = int(action.split(":")[-1]) if ":" in action else 1
        await cb.message.edit_reply_markup(reply_markup=edit_fields_menu_kb(page))
        await cb.answer()
        return

    if action == "send":
        data = await state.get_data()
        repo = get_repo()

        payload = {
            "tg_user_id": str(cb.from_user.id),
            "full_name": data.get("full_name"),
            "group": data.get("group"),
            "email": data.get("email"),
            "birthDate": data.get("birthDate"),
            "books": data.get("books"),
            "likedRecentMovie": data.get("likedRecentMovie"),
            "aboutYou": data.get("aboutYou"),
            "afterUniversity": data.get("afterUniversity"),
            "redDiploma": data.get("redDiploma"),
            "scienceInterest": data.get("scienceInterest"),
            "thesisTopic": data.get("thesisTopic"),
            "thesisDescription": data.get("thesisDescription"),
            "analogsProsCons": data.get("analogsProsCons"),
            "plannedFeatures": data.get("plannedFeatures"),
            "techStack": data.get("techStack"),
        }

        editing_doc_id = data.get("_editing_doc_id")
        if editing_doc_id:
            repo.db.update_document(
                database_id=repo.db_id,
                collection_id=repo.sub_col,
                document_id=editing_doc_id,
                data=payload,
            )

            admin_text = _format_submission_for_admin(
                title="‚úèÔ∏è –ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                payload=payload,
                appwrite_id=editing_doc_id,
                status=None,
            )
            await notify_admins(cb.bot, admin_text)

            await state.clear()
            doc = repo.get_submission_by_user(str(cb.from_user.id))
            await cb.message.edit_text(
                "üíæ <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
                reply_markup=student_actions_kb(doc),
                parse_mode="HTML",
            )
            await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            return

        payload["status"] = "pending"
        created = repo.create_submission(payload)

        payload_with_ids = dict(payload)
        payload_with_ids["$id"] = created.get("$id")
        append_submission_to_sheet(payload_with_ids)

        admin_text = _format_submission_for_admin(
            title="üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
            payload=payload,
            appwrite_id=created.get("$id"),
            status=payload.get("status"),
        )
        await notify_admins(cb.bot, admin_text)

        await state.clear()
        doc = repo.get_submission_by_user(str(cb.from_user.id))
        await cb.message.edit_text(
            "‚úÖ <b>–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: ‚è≥ {ru_status('pending')}\n"
            "–û —Ä–µ—à–µ–Ω–∏–∏ –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            reply_markup=student_actions_kb(doc),
            parse_mode="HTML",
        )
        await cb.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return

# ====================== –ú–û–Ø –ó–ê–Ø–í–ö–ê / –ú–ï–ù–Æ –î–ï–ô–°–¢–í–ò–ô ======================
@router.callback_query(F.data == "student:menu:view")
async def view_submission(cb: CallbackQuery):
    repo = get_repo()
    doc = repo.get_submission_by_user(str(cb.from_user.id))
    if not doc:
        await cb.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–∫–∏.", show_alert=True)
        return

    status_ru_ = ru_status(doc.get("status"))
    admin_comment = doc.get("admin_comment")
    admin_comment = admin_comment if (isinstance(admin_comment, str) and admin_comment.strip()) else "–Ω–µ—Ç"
    allow_answer = bool(doc.get("allow_student_reply", False))
    admin_question = doc.get("admin_question") or "‚Äî"

    ans_bool = doc.get("student_answer", None)
    if ans_bool is True:
        ans_bool_text = "–ø—Ä–∏–Ω—è–ª ‚úÖ"
    elif ans_bool is False:
        ans_bool_text = "–æ—Ç–∫–ª–æ–Ω–∏–ª ‚ùå"
    else:
        ans_bool_text = "‚Äî"

    text_answer = doc.get("student_text_answer") or "‚Äî"

    text = (
        "üìÑ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞</b>\n\n"
        f"üë§ –§–ò–û: {doc.get('full_name','‚Äî')}\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {doc.get('group','‚Äî')}\n"
        f"üìß Email: {doc.get('email','‚Äî')}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {doc.get('birthDate','‚Äî')}\n\n"
        f"üìö –ö–Ω–∏–≥–∏: {doc.get('books','‚Äî')}\n"
        f"üé¨ –§–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª: {doc.get('likedRecentMovie','‚Äî')}\n"
        f"‚ÑπÔ∏è –û —Å—Ç—É–¥–µ–Ω—Ç–µ: {doc.get('aboutYou','‚Äî')}\n"
        f"üéì –ü–æ—Å–ª–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞: {doc.get('afterUniversity','‚Äî')}\n"
        f"üéñ –ö—Ä–∞—Å–Ω—ã–π –¥–∏–ø–ª–æ–º: {doc.get('redDiploma','‚Äî')}\n"
        f"üìë –ù–∞—É—á–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {doc.get('scienceInterest','‚Äî')}\n\n"
        f"üìù –¢–µ–º–∞: {doc.get('thesisTopic','‚Äî')}\n"
        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {doc.get('thesisDescription','‚Äî')}\n"
        f"üìä –ê–Ω–∞–ª–æ–≥–∏: {doc.get('analogsProsCons','‚Äî')}\n"
        f"‚öôÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: {doc.get('plannedFeatures','‚Äî')}\n"
        f"üñ•Ô∏è –°—Ç–µ–∫: {doc.get('techStack','‚Äî')}\n\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {status_ru_}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {admin_comment}\n\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {admin_question}\n"
        f"üìù –í–∞—à —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {text_answer}\n"
        f"‚úÖ –í–∞—à –≤—ã–±–æ—Ä (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è): {ans_bool_text}"
    )

    has_question = bool(doc.get("admin_question"))
    await cb.message.edit_text(text, parse_mode="HTML",
                               reply_markup=student_menu_with_answer_kb(allow_answer, has_question))
    await cb.answer()

@router.callback_query(F.data == "student:menu:back")
async def student_menu_back(cb: CallbackQuery):
    repo = get_repo()
    doc = repo.get_submission_by_user(str(cb.from_user.id))
    await cb.message.edit_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=student_actions_kb(doc))
    await cb.answer()

@router.callback_query(F.data == "student:menu:edit")
async def edit_submission(cb: CallbackQuery, state: FSMContext):
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞—è–≤–∫—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–µ—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    repo = get_repo()
    doc = repo.get_submission_by_user(str(cb.from_user.id))
    if not doc:
        await cb.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–∫–∏.", show_alert=True)
        return

    # –∑–∞–ø—Ä–µ—Ç–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —É–∂–µ –¥–∞–ª –±—É–ª–µ–≤ –æ—Ç–≤–µ—Ç
    if doc.get("student_answer") is not None:
        await cb.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.", show_alert=True)
        return

    preload = {
        "full_name":         doc.get("full_name",""),
        "group":             doc.get("group",""),
        "email":             doc.get("email",""),
        "birthDate":         doc.get("birthDate",""),
        "books":             doc.get("books",""),
        "likedRecentMovie":  doc.get("likedRecentMovie",""),
        "aboutYou":          doc.get("aboutYou",""),
        "afterUniversity":   doc.get("afterUniversity",""),
        "redDiploma":        doc.get("redDiploma",""),
        "scienceInterest":   doc.get("scienceInterest",""),
        "thesisTopic":       doc.get("thesisTopic",""),
        "thesisDescription": doc.get("thesisDescription",""),
        "analogsProsCons":   doc.get("analogsProsCons",""),
        "plannedFeatures":   doc.get("plannedFeatures",""),
        "techStack":         doc.get("techStack",""),
        "_editing_doc_id":   doc.get("$id"),
    }
    await state.clear()
    await state.update_data(**preload)
    await state.set_state(StudentForm.confirm)

    await cb.message.edit_text("–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à—É –∞–Ω–∫–µ—Ç—É‚Ä¶")
    await show_summary(cb, preload, editing=True)
    await cb.answer()

@router.callback_query(F.data == "student:menu:cancel")
async def cancel_submission(cb: CallbackQuery):
    repo = get_repo()
    doc = repo.get_submission_by_user(str(cb.from_user.id))
    if not doc:
        await cb.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–∫–∏.", show_alert=True)
        return

    repo.db.delete_document(repo.db_id, repo.sub_col, doc["$id"])
    await cb.message.edit_text("‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ—ë –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.")
    await cb.answer("–£–¥–∞–ª–µ–Ω–æ")

# ====================== –û–¢–í–ï–¢ –°–¢–£–î–ï–ù–¢–ê ======================
# 1) –¢–ï–ö–°–¢–û–í–´–ô –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "student:menu:answer")
async def student_answer_begin(cb: CallbackQuery, state: FSMContext):
    repo = get_repo()
    doc = repo.get_submission_by_user(str(cb.from_user.id))
    if not doc:
        await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    # ‚ùóÔ∏è–†–∞–∑—Ä–µ—à–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç allow_student_reply
    if not bool(doc.get("admin_question")):
        await cb.answer("–°–µ–π—á–∞—Å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.", show_alert=True)
        return

    await state.set_state(StudentForm.answering_admin)
    await cb.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
    await cb.answer()


@router.message(StudentForm.answering_admin)
async def student_answer_text_save(msg: Message, state: FSMContext):
    repo = get_repo()
    doc = repo.get_submission_by_user(str(msg.from_user.id))
    if not doc:
        await msg.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    answer = msg.text.strip()
    try:
        repo.db.update_document(
            database_id=repo.db_id,
            collection_id=repo.sub_col,
            document_id=doc["$id"],
            data={
                "student_text_answer": answer,
                # –∑–∞–∫—Ä—ã–≤–∞–µ–º ¬´—Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤¬ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
                "allow_student_reply": False,
            },
        )
    except Exception:
        await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    await notify_admins(
        msg.bot,
        "üì® <b>–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ</b>\n"
        f"üë§ {doc.get('full_name','‚Äî')} | {doc.get('group','‚Äî')}\n"
        f"üìù –û—Ç–≤–µ—Ç: {answer}\n\n"
        f"–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å: /admin"
    )

    await msg.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é ‚úÖ")
    await state.clear()


# 2) –ë—É–ª–µ–≤ –æ—Ç–≤–µ—Ç (–ü—Ä–∏–Ω—è—Ç—å / –û—Ç–∫–ª–æ–Ω–∏—Ç—å), –≤–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ admin:toggle_reply:on
@router.callback_query(F.data == "student:answer:yes")
async def student_answer_yes(cb: CallbackQuery):
    repo = get_repo()
    doc = repo.get_submission_by_user(str(cb.from_user.id))
    if not doc:
        await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    try:
        repo.db.update_document(
            database_id=repo.db_id,
            collection_id=repo.sub_col,
            document_id=doc["$id"],
            data={
                "student_answer": True,
                "allow_student_reply": False,
            },
        )
    except Exception:
        await cb.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç.", show_alert=True)
        return

    await notify_admins(
        cb.bot,
        "üì® <b>–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ</b>\n"
        f"üë§ {doc.get('full_name','‚Äî')} | {doc.get('group','‚Äî')}\n"
        f"üìù –í—ã–±–æ—Ä: –ø—Ä–∏–Ω—è–ª ‚úÖ\n\n"
        f"–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å: /admin"
    )
    await cb.answer("–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    await view_submission(cb)

@router.callback_query(F.data == "student:answer:no")
async def student_answer_no(cb: CallbackQuery):
    repo = get_repo()
    doc = repo.get_submission_by_user(str(cb.from_user.id))
    if not doc:
        await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    try:
        repo.db.update_document(
            database_id=repo.db_id,
            collection_id=repo.sub_col,
            document_id=doc["$id"],
            data={
                "student_answer": False,
                "allow_student_reply": False,
            },
        )
    except Exception:
        await cb.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç.", show_alert=True)
        return

    await notify_admins(
        cb.bot,
        "üì® <b>–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ</b>\n"
        f"üë§ {doc.get('full_name','‚Äî')} | {doc.get('group','‚Äî')}\n"
        f"üìù –í—ã–±–æ—Ä: –æ—Ç–∫–ª–æ–Ω–∏–ª ‚ùå\n\n"
        f"–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å: /admin"
    )
    await cb.answer("–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    await view_submission(cb)
